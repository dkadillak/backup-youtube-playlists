youtube-dl -j --flat-playlist https://www.youtube.com/playlist?list=PLRiuXjlcutvbdWuiOsobmy57ZZGm2j7x3 > for_the_books.json
> gives you output like for_the_books.json which is pretty much everything you need except thumbnails

youtube-dl -j --flat-playlist https://www.youtube.com/playlist?list=PLRiuXjlcutvbdWuiOsobmy57ZZGm2j7x3  | wc -l
> just give me the number of videos in a specific playlist

youtube-dl --write-thumbnail --skip-download https://www.youtube.com/watch?v=ZBYwUaoJquM
> get thumbnail


fetching thumbnails:
import re
import requests
import subprocess

with open('results.txt') as f:
    for line in f:
        proc = subprocess.Popen(['youtube-dl', '--list-thumbnails', line], stdout=subprocess.PIPE)
        youtubedl_output, err = proc.communicate()
        imgurl = re.search("(?P<url>https?://[^\s]+)", youtubedl_output).group('url')
        r = requests.get(imgurl)
        if r.status_code == 200:
            with open(imgurl.split('/')[4] + '.jpg', 'wb') as file:
                for chunk in r.iter_content(1024):
                    file.write(chunk)

get length of video:
youtube-dl --get-duration https://www.youtube.com/watch?v=syK3EZpi1sw
54:44

calculating length of video:
File Size = Bitrate x duration x compression ratio
720p (HD)	1 Mbps	5MB	3.5 hours
youtube-dl typically uses 720p max


ideas for project:
- script that runs periodically checking if there are updates with playlists, handles downloading and storing them in mega.nz using user's mega.nz credentials
- gui that user interacts with, serves as a time machine for youtube playlists where they can see thumbnails, titles, descriptions of videos and there is an option to download/play video
- a login in the gui to a users youtube that displays all the users playlists and asks them which ones they want to backup
   then do a quick estimation using the characteristics of the videos in the playlist vs the users mega.nz available space to say
   whether they will or wont have enough space to back up their playlists


ideas after talking to colt:
- just store files locally on user's computer
- user will have to decide how often to back up playlists
- gui is in charge of picking which videos to not backup anymore

gui flow on first use:
- enter playlists to backup
    - roughly calculate storage space needed to store videos
- enter location to save videos in

What should be in GUI:
- section to add playlists to track
- status tracker, what is the app doing
- section to browse playlists and see thumbnails, vid (possibly play vid), and description
    - section allows users to delete video from playlist (which updates master_playlist.json)
script flow:
- for each playlist in playlists list
    * check if master_playlist.json file exists for that playlist
        - if not, download vids in playlist, thumbnails, description, store all files in correct location (<user specified vid location>/<playlist_name>/<video_name>
        - if yes, get current number of videos in playlist
            - if current # vids > master_playlist.json length download current videos not in master list, add to master_playlist.json
            - if current # vids < master_playlist.json length don't download anything

