Flow of program logic:
- Step 1 get title of playlist (Capture stdout response)
youtube-dl --get-filename -o "%(playlist_title)s" <playlist url>

- Step 2, check if playlist name exists in the 'saved-playlists' folder
    No -> proceed to step 3b then your done
    Yes -> proceed to step 3a then keep going

- Step 3a, compare length of new playlist vs what we have stored
    new playlist (capture std out):
        youtube-dl -j --flat-playlist <playlist url>  | wc -l

    old playlist (using title of playlist captured from Step 1)
        create name <playlist>_MASTER.json
        cat <playlist>_MASTER.json | wc -l
        capture stdout

    now compare the two values, if new playlist > old_playlist we need to see what video is missing from <playlist name>_MASTER.json
        this means we actually need the list of files in the new playlist
            youtube-dl -j --flat-playlist <playlist url>  > <playlist name>.txt

- Step 3b, just download everything! create <playlist>_MASTER.json file
    youtube-dl --write-thumbnail --write-info-json -w -o "./saved-playlists/%(playlist_title)s/%(playlist_index)s:%(title)s/%(title)s.%(ext)s" <playlist url>
    now save that master list!
            youtube-dl -j --flat-playlist <playlist url>  > <playlist name>_MASTER.txt

- Step 4, compare json contents
remember with these unicode strings we need to do this to them str.encode('utf-16', 'surrogatepass').decode('utf-16') to get things like '𝓓𝓡𝓔𝓐𝓜 𝓕𝓔𝓔𝓣'




short public playlist link for testing:
https://youtube.com/playlist?list=PLD5tdhS33Hf5HwwrBm9iDoIjjOuZjoVkc

short unlisted playlist link for testing:
https://youtube.com/playlist?list=PLD5tdhS33Hf4i1YyVvP0-j63VghX4It9c

youtube-dl -j --flat-playlist https://www.youtube.com/playlist?list=PLRiuXjlcutvbdWuiOsobmy57ZZGm2j7x3 > for_the_books.json
> gives you output like for_the_books.json which is pretty much everything you need except thumbnails

youtube-dl -j --flat-playlist https://www.youtube.com/playlist?list=PLRiuXjlcutvbdWuiOsobmy57ZZGm2j7x3  | wc -l
> just give me the number of videos in a specific playlist

youtube-dl --write-thumbnail --skip-download https://www.youtube.com/watch?v=ZBYwUaoJquM
> get thumbnail

youtube-dl -o "./saved-playlists/%(playlist_title)s/%(playlist_index)s/%(title)s.%(ext)s" https://youtube.com/playlist?list=PLD5tdhS33Hf5HwwrBm9iDoIjjOuZjoVkc
> save playlist to folder called 'saved-playlists' in current dir. Folder Structure is /playlist-title/playlist-index/video

youtube-dl --write-description -o "./saved-playlists/%(playlist_title)s/%(playlist_index)s:%(title)s/%(title)s.%(ext)s" https://youtube.com/playlist?list=PLD5tdhS33Hf5HwwrBm9iDoIjjOuZjoVkc
> save playlist to individual folder like above and write the description for each video in folder as well

youtube-dl --write-thumbnail --write-description -o "./saved-playlists/%(playlist_title)s/%(playlist_index)s:%(title)s/%(title)s.%(ext)s" https://youtube.com/playlist?list=PLD5tdhS33Hf5HwwrBm9iDoIjjOuZjoVkc
> savel playlist to individual folder, save description and thumbnail in folder as well

youtube-dl --write-thumbnail --write-info-json -w -o "./saved-playlists/%(playlist_title)s/%(playlist_index)s:%(title)s/%(title)s.%(ext)s" https://youtube.com/playlist?list=PLD5tdhS33Hf5HwwrBm9iDoIjjOuZjoVkc
> most current call that does all the actions we need

youtube-dl --get-filename -o "%(playlist_title)s" https://youtube.com/playlist?list=PLD5tdhS33Hf4i1YyVvP0-j63VghX4It9c
> just get title of playlist


get length of video:
youtube-dl --get-duration https://www.youtube.com/watch?v=syK3EZpi1sw
54:44

calculating length of video:
File Size = Bitrate x duration x compression ratio
720p (HD)	1 Mbps	5MB	3.5 hours
youtube-dl typically uses 720p max


ideas for project:
- script that runs periodically checking if there are updates with playlists, handles downloading and storing them in mega.nz using user's mega.nz credentials
- gui that user interacts with, serves as a time machine for youtube playlists where they can see thumbnails, titles, descriptions of videos and there is an option to download/play video
- a login in the gui to a users youtube that displays all the users playlists and asks them which ones they want to backup
   then do a quick estimation using the characteristics of the videos in the playlist vs the users mega.nz available space to say
   whether they will or wont have enough space to back up their playlists


ideas after talking to colt:
- just store files locally on user's computer
- user will have to decide how often to back up playlists
- gui is in charge of picking which videos to not backup anymore

gui flow on first use:
- enter playlists to backup
    - roughly calculate storage space needed to store videos
- enter location to save videos in

What should be in GUI:
- section to add playlists to track
- status tracker, what is the app doing
- section to browse playlists and see thumbnails, vid (possibly play vid), and description
    - section allows users to delete video from playlist (which updates master_playlist.json)
script flow:
- for each playlist in playlists list
    * check if master_playlist.json file exists for that playlist
        - if not, download vids in playlist, thumbnails, description, store all files in correct location (<user specified vid location>/<playlist_name>/<video_name>
        - if yes, get current number of videos in playlist
            - if current # vids > master_playlist.json length download current videos not in master list, add to master_playlist.json
            - if current # vids < master_playlist.json length don't download anything


STILL TO FIGURE OUT
- downloading description of video and other details like date uploaded
- using subprocess to execute all commands
- add description on how to run in readme
    - add youtube-dl as dependency in
- testing out downloading videos from a playlist using the -o flag to specify file structure
- writing a gui